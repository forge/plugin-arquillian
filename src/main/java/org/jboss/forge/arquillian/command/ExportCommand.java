package org.jboss.forge.arquillian.command;


public class ExportCommand {

    /**
     * This command exports an Archive generated by a @Deployment method to disk. Because the project's classpath is not
     * in the classpath of Forge, the @Deployment method can't be called directly.The plugin works in the following
     * steps: 1 - Generate a new class to the src/test/java folder 2 - Compile the user's classes using mvn test-compile
     * 3 - Run the generated class using mvn exec:java (so that the project's classes are on the classpath) 4 - Delete
     * the generated class
     */
   /*
   @Command(value = "export", help = "Export a @Deployment configuration to a zip file on disk.")
   @RequiresResource(JavaResource.class)
   public void exportDeployment(@Option(name = "keepExporter", flagOnly = true) boolean keepExporter, PipeOut out)
   {

      final JavaSourceFacet javaSourceFacet = project.getFacet(JavaSourceFacet.class);
      try
      {
         JavaResource testJavaResource = javaSourceFacet.getTestJavaResource("forge/arquillian/DeploymentExporter.java");
         if (!testJavaResource.exists())
         {
            generateExporterClass(javaSourceFacet);
         }

         runExporterClass(out);

         if (!keepExporter)
         {
            testJavaResource.delete();
         }
      }
      catch (Exception ex)
      {
         throw new RuntimeException("Error while calling generated DeploymentExporter ", ex);
      }
   }


   private void runExporterClass(PipeOut out) throws IOException
   {
      JavaExecutionFacet facet = project.getFacet(Execution.class);
      facet.executeProjectClass("forge.arquillian.DeploymentExporter", resource.getJavaSource().getQualifiedName());
   }

   private void generateExporterClass(JavaSourceFacet java) throws FileNotFoundException
   {

      VelocityContext context = new VelocityContext();

      StringWriter writer = new StringWriter();
      Velocity.mergeTemplate("DeploymentExporter.vtl", "UTF-8", context, writer);
      JavaClass deploymentExporter = JavaParser.parse(JavaClass.class, writer.toString());

      java.saveTestJavaSource(deploymentExporter);
      java.saveTestJavaSource(deploymentExporter);
   }
   */
}
